{"version":3,"sources":["components/Map.js","constants/colors.js","utils/color.js","views/Main.js","serviceWorker.js","index.js"],"names":["Map","props","react_default","a","createElement","className","lib","height","viewBox","disablePanning","geography","disableOptimization","geographies","map","index","key","id","onClick","style","getStyles","BASE_COLOR","BORDER_COLOR","HOVER_COLOR","HOVER_BORDER_COLOR","PRESSED_COLOR","PRESSED_BORDER_COLOR","SELECTED_COLOR","getShadedColor","color","col","amt","usePound","slice","num","parseInt","r","b","g","toString","shadeColor","y1","x1","Main","state","selected","getMapStyles","default","outline","transition","stroke","fill","_this","hover","cursor","pressed","getCurrentTime","timezone","spacetime","now","unixFmt","handleClick","setState","prevState","components_Map","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","views_Main","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d9460d33.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  ComposableMap,\n  ZoomableGroup,\n  Geographies,\n  Geography\n} from 'react-simple-maps';\n\nimport geography from '../constants/geography.json';\n\nconst Map = props => (\n  <div className=\"map-container\">\n    <ComposableMap height=\"800\" viewBox=\"0 0 960 1008\">\n      <ZoomableGroup disablePanning>\n        <Geographies geography={geography} disableOptimization>\n          {geographies =>\n            geographies.map((geography, index) => (\n              <Geography\n                key={geography.id}\n                geography={geography}\n                onClick={props.onClick}\n                style={props.getStyles(geography, index)}\n              />\n            ))\n          }\n        </Geographies>\n      </ZoomableGroup>\n    </ComposableMap>\n  </div>\n);\n\nexport default Map;\n","export const BASE_COLOR = '#bcdbed';\nexport const BORDER_COLOR = '#87bdde';\n\nexport const HOVER_COLOR = '#49c';\nexport const HOVER_BORDER_COLOR = '#47a';\n\nexport const PRESSED_COLOR = '#47a';\nexport const PRESSED_BORDER_COLOR = '#47a';\n\nexport const SELECTED_COLOR = '#47a';","function interpolate(value, x1, x2, y1, y2) {\n  return y1 + ((value - x1) / (x2 - x1)) * (y2 - y1);\n}\n\nfunction shadeColor(col, amt) {\n  let usePound = false;\n\n  if (col[0] === '#') {\n    col = col.slice(1);\n    usePound = true;\n  }\n\n  let num = parseInt(col, 16);\n\n  let r = (num >> 16) + amt;\n\n  if (r > 255) r = 255;\n  else if (r < 0) r = 0;\n\n  let b = ((num >> 8) & 0x00ff) + amt;\n\n  if (b > 255) b = 255;\n  else if (b < 0) b = 0;\n\n  let g = (num & 0x0000ff) + amt;\n\n  if (g > 255) g = 255;\n  else if (g < 0) g = 0;\n\n  return (usePound ? '#' : '') + (g | (b << 8) | (r << 16)).toString(16);\n}\n\nexport function getShadedColor(color, index) {\n  return shadeColor(color, interpolate(index, 0, 300, -20, 20));\n}\n","import React from 'react';\nimport spacetime from 'spacetime';\n\nimport Map from '../components/Map';\n\nimport { BASE_COLOR, BORDER_COLOR, HOVER_COLOR, HOVER_BORDER_COLOR, PRESSED_COLOR, PRESSED_BORDER_COLOR, SELECTED_COLOR } from '../constants/colors';\n\nimport { getShadedColor } from '../utils/color';\n\nclass Main extends React.Component {\n  state = {\n    selected: {}\n  };\n\n  getMapStyles = (geography, index) => {\n    return {\n      default: {\n        outline: 'none',\n        transition: '.5s',\n        stroke: BORDER_COLOR,\n        fill: this.state.selected.id === geography.id ? SELECTED_COLOR : getShadedColor(BASE_COLOR, index)\n      },\n      hover: {\n        outline: 'none',\n        cursor: 'pointer',\n        stroke: HOVER_BORDER_COLOR,\n        fill: this.state.selected.id === geography.id ? SELECTED_COLOR : HOVER_COLOR\n      },\n      pressed: {\n        outline: 'none',\n        cursor: 'pointer',\n        fill: PRESSED_COLOR,\n        stroke: PRESSED_BORDER_COLOR,\n      }\n    };\n  };\n\n  getCurrentTime = timezone => {\n    const time = spacetime.now(timezone);\n\n    return time.unixFmt('yyyy-MM-dd h:mm a');\n  };\n\n  handleClick = geography => {\n    this.setState(prevState => ({\n      selected: prevState.selected.id !== geography.id ? geography : {}\n    }));\n  };\n\n  render() {\n    return (\n      <div>\n        <Map getStyles={this.getMapStyles} onClick={this.handleClick} />\n        {this.state.selected.id && (\n          <div className=\"time-details\">\n            <p>{this.state.selected.id}</p>\n            <p>{this.getCurrentTime(this.state.selected.id)}</p>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles';\n\nimport Main from './views/Main';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}